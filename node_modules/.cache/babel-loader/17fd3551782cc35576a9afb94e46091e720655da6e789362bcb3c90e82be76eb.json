{"ast":null,"code":"import React,{useState}from'react';import FilmForm from'./FilmForm';import FilmList from'./FilmList';import Header from'./Header';import Footer from'./Footer';import'./App.css';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[films,setFilms]=useState([]);const[showForm,setShowForm]=useState(false);const[editableFilm,setEditableFilm]=useState(null);const addFilm=filmData=>{const newFilm={id:Date.now(),title:filmData.title,description:filmData.description,rating:filmData.rating,thumbnail:filmData.thumbnail,video:filmData.file};setFilms([...films,newFilm]);setShowForm(false);};const deleteFilm=filmId=>{setFilms(films.filter(film=>film.id!==filmId));};const handleEditFilm=updatedFilm=>{setFilms(films.map(film=>film.id===updatedFilm.id?updatedFilm:film));setShowForm(false);setEditableFilm(null);};const handleCancel=()=>{setShowForm(false);};const onCloseFormAndRefresh=()=>{setShowForm(false);};const startEditFilm=film=>{setEditableFilm(film);setShowForm(true);};return/*#__PURE__*/_jsxs(\"div\",{className:\"App\",children:[/*#__PURE__*/_jsx(Header,{}),/*#__PURE__*/_jsx(\"h1\",{children:\"Filmdatabas\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>{setShowForm(true);setEditableFilm(null);},children:\"Add New Film\"}),showForm&&/*#__PURE__*/_jsx(FilmForm,{filmToEdit:editableFilm,onAddFilm:addFilm,onEditFilm:handleEditFilm,onCancel:handleCancel,onCloseFormAndRefresh:onCloseFormAndRefresh}),/*#__PURE__*/_jsx(FilmList,{films:films,onDelete:deleteFilm,onEdit:startEditFilm}),/*#__PURE__*/_jsx(Footer,{})]});}export default App;//The code below is both for frontend and backend and the code above is olny for the frontend \n// import React, { useState, useEffect } from 'react';\n// import FilmForm from './FilmForm';\n// import FilmList from './FilmList';\n// import Header from './Header';\n// import Footer from './Footer';\n// import './App.css';\n// function App() {\n//   const [films, setFilms] = useState([]);\n//   const [showForm, setShowForm] = useState(false);\n//   const [editableFilm, setEditableFilm] = useState(null);\n//   const fetchFilms = () => {\n//     fetch('http://localhost:3000/films')\n//       .then(response => response.json())\n//       .then(data => {\n//         setFilms(data);\n//       })\n//       .catch(error => console.error('Error:', error));\n//   };\n//   const addFilm = (filmData) => {\n//     const formData = new FormData();\n//     formData.append('title', filmData.title);\n//     formData.append('description', filmData.description);\n//     formData.append('rating', filmData.rating);\n//     formData.append('thumbnail', filmData.thumbnail);\n//     formData.append('video', filmData.file);\n//     fetch('http://localhost:3000/films', {\n//       method: 'POST',\n//       body: formData,\n//     })\n//       .then(response => response.json())\n//       .then(() => {\n//         fetchFilms();\n//         setShowForm(false);\n//       })\n//       .catch((error) => {\n//         console.error('Error:', error);\n//       });\n//   };\n//   const handleCancel = () => {\n//     setShowForm(false);\n//   };\n//   const onCloseFormAndRefresh = () => {\n//     setShowForm(false);\n//     setTimeout(() => {\n//       window.location.reload();\n//     }, 100);\n//   };\n//   useEffect(() => {\n//     fetchFilms();\n//   }, []);\n//   const deleteFilm = (filmId) => {\n//     fetch(`http://localhost:3000/films/${filmId}`, {\n//       method: 'DELETE',\n//     })\n//       .then(response => {\n//         if (response.ok) {\n//           fetchFilms();\n//         } else {\n//           console.error('Failed to delete the film');\n//         }\n//       })\n//       .catch((error) => {\n//         console.error('Error:', error);\n//       });\n//   };\n//   const handleEditFilm = (updatedFilm) => {\n//     fetch(`http://localhost:3000/films/${updatedFilm.id}`, {\n//       method: 'PUT',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify(updatedFilm),\n//     })\n//       .then(response => {\n//         if (response.ok) {\n//           fetchFilms();\n//         } else {\n//           console.error('Failed to update the film');\n//         }\n//       })\n//       .catch((error) => {\n//         console.error('Error:', error);\n//       });\n//     setShowForm(false);\n//     setEditableFilm(null);\n//   };\n//   const startEditFilm = (film) => {\n//     setEditableFilm(film);\n//     setShowForm(true);\n//   };\n//   return (\n//     <div className=\"App\">\n//       <Header /> { }\n//       <h1>Filmdatabas</h1>\n//       <button onClick={() => { setShowForm(true); setEditableFilm(null); }}>Add New Film</button>\n//       {showForm && (\n//         <FilmForm\n//           filmToEdit={editableFilm}\n//           onAddFilm={addFilm}\n//           onEditFilm={handleEditFilm}\n//           onCancel={handleCancel}\n//           onCloseFormAndRefresh={onCloseFormAndRefresh}\n//         />\n//       )}\n//       <FilmList\n//         films={films}\n//         onDelete={deleteFilm}\n//         onEdit={startEditFilm}\n//       />\n//       <Footer /> { }\n//     </div>\n//   );\n// }\n// export default App;","map":{"version":3,"names":["React","useState","FilmForm","FilmList","Header","Footer","jsx","_jsx","jsxs","_jsxs","App","films","setFilms","showForm","setShowForm","editableFilm","setEditableFilm","addFilm","filmData","newFilm","id","Date","now","title","description","rating","thumbnail","video","file","deleteFilm","filmId","filter","film","handleEditFilm","updatedFilm","map","handleCancel","onCloseFormAndRefresh","startEditFilm","className","children","onClick","filmToEdit","onAddFilm","onEditFilm","onCancel","onDelete","onEdit"],"sources":["/Users/milad888/Desktop/HoÌˆgskolan/webb utveckling 2/inl5/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport FilmForm from './FilmForm';\nimport FilmList from './FilmList';\nimport Header from './Header';\nimport Footer from './Footer';\nimport './App.css';\n\nfunction App() {\n  const [films, setFilms] = useState([]);\n  const [showForm, setShowForm] = useState(false);\n  const [editableFilm, setEditableFilm] = useState(null);\n\n\n  const addFilm = (filmData) => {\n    const newFilm = {\n      id: Date.now(),\n      title: filmData.title,\n      description: filmData.description,\n      rating: filmData.rating,\n      thumbnail: filmData.thumbnail,\n      video: filmData.file\n    };\n    setFilms([...films, newFilm]);\n    setShowForm(false);\n  };\n\n\n  const deleteFilm = (filmId) => {\n    setFilms(films.filter(film => film.id !== filmId));\n  };\n\n\n  const handleEditFilm = (updatedFilm) => {\n    setFilms(films.map(film => film.id === updatedFilm.id ? updatedFilm : film));\n    setShowForm(false);\n    setEditableFilm(null);\n  };\n\n  const handleCancel = () => {\n    setShowForm(false);\n  };\n\n  const onCloseFormAndRefresh = () => {\n    setShowForm(false);\n  };\n\n  const startEditFilm = (film) => {\n    setEditableFilm(film);\n    setShowForm(true);\n  };\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <h1>Filmdatabas</h1>\n      <button onClick={() => { setShowForm(true); setEditableFilm(null); }}>Add New Film</button>\n      {showForm && (\n        <FilmForm\n          filmToEdit={editableFilm}\n          onAddFilm={addFilm}\n          onEditFilm={handleEditFilm}\n          onCancel={handleCancel}\n          onCloseFormAndRefresh={onCloseFormAndRefresh}\n        />\n      )}\n      <FilmList\n        films={films}\n        onDelete={deleteFilm}\n        onEdit={startEditFilm}\n      />\n      <Footer />\n    </div>\n  );\n}\n\nexport default App;\n\n\n//The code below is both for frontend and backend and the code above is olny for the frontend \n\n\n// import React, { useState, useEffect } from 'react';\n// import FilmForm from './FilmForm';\n// import FilmList from './FilmList';\n// import Header from './Header';\n// import Footer from './Footer';\n// import './App.css';\n\n\n\n// function App() {\n//   const [films, setFilms] = useState([]);\n//   const [showForm, setShowForm] = useState(false);\n//   const [editableFilm, setEditableFilm] = useState(null);\n\n//   const fetchFilms = () => {\n//     fetch('http://localhost:3000/films')\n//       .then(response => response.json())\n//       .then(data => {\n//         setFilms(data);\n//       })\n//       .catch(error => console.error('Error:', error));\n//   };\n\n//   const addFilm = (filmData) => {\n//     const formData = new FormData();\n//     formData.append('title', filmData.title);\n//     formData.append('description', filmData.description);\n//     formData.append('rating', filmData.rating);\n//     formData.append('thumbnail', filmData.thumbnail);\n//     formData.append('video', filmData.file);\n\n//     fetch('http://localhost:3000/films', {\n//       method: 'POST',\n//       body: formData,\n//     })\n//       .then(response => response.json())\n//       .then(() => {\n//         fetchFilms();\n//         setShowForm(false);\n//       })\n//       .catch((error) => {\n//         console.error('Error:', error);\n//       });\n//   };\n\n//   const handleCancel = () => {\n//     setShowForm(false);\n//   };\n\n\n//   const onCloseFormAndRefresh = () => {\n//     setShowForm(false);\n//     setTimeout(() => {\n//       window.location.reload();\n//     }, 100);\n//   };\n\n\n//   useEffect(() => {\n//     fetchFilms();\n//   }, []);\n\n//   const deleteFilm = (filmId) => {\n//     fetch(`http://localhost:3000/films/${filmId}`, {\n//       method: 'DELETE',\n//     })\n//       .then(response => {\n//         if (response.ok) {\n//           fetchFilms();\n//         } else {\n//           console.error('Failed to delete the film');\n//         }\n//       })\n//       .catch((error) => {\n//         console.error('Error:', error);\n//       });\n//   };\n\n//   const handleEditFilm = (updatedFilm) => {\n//     fetch(`http://localhost:3000/films/${updatedFilm.id}`, {\n//       method: 'PUT',\n//       headers: {\n//         'Content-Type': 'application/json',\n//       },\n//       body: JSON.stringify(updatedFilm),\n//     })\n//       .then(response => {\n//         if (response.ok) {\n//           fetchFilms();\n//         } else {\n//           console.error('Failed to update the film');\n//         }\n//       })\n//       .catch((error) => {\n//         console.error('Error:', error);\n//       });\n\n//     setShowForm(false);\n//     setEditableFilm(null);\n//   };\n\n//   const startEditFilm = (film) => {\n//     setEditableFilm(film);\n//     setShowForm(true);\n//   };\n\n//   return (\n//     <div className=\"App\">\n//       <Header /> { }\n//       <h1>Filmdatabas</h1>\n//       <button onClick={() => { setShowForm(true); setEditableFilm(null); }}>Add New Film</button>\n//       {showForm && (\n//         <FilmForm\n//           filmToEdit={editableFilm}\n//           onAddFilm={addFilm}\n//           onEditFilm={handleEditFilm}\n//           onCancel={handleCancel}\n//           onCloseFormAndRefresh={onCloseFormAndRefresh}\n//         />\n//       )}\n//       <FilmList\n//         films={films}\n//         onDelete={deleteFilm}\n//         onEdit={startEditFilm}\n//       />\n//       <Footer /> { }\n//     </div>\n//   );\n// }\n\n// export default App;\n\n"],"mappings":"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},"metadata":{},"sourceType":"module","externalDependencies":[]}